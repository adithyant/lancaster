#!/bin/bash
SCRIPT_DIR=`dirname $0`/../crons
CRON_DIR=$SCRIPT_DIR
#Removing the crontab suffix if it was added and add a trailing '.'
BASE_CRON_PREFIX=`echo $1 | sed 's/.crontab$//g' | sed 's/$/./g'`
BASE_CRON_FILE="$BASE_CRON_PREFIX"crontab
HOST_CRON_FILE=$BASE_CRON_PREFIX`hostname`.crontab
USER_CRON_FILE=$BASE_CRON_PREFIX`hostname`.${USER}.crontab
BACKUP_CRON_DIR=~/cron
BACKUP_CRON=$BACKUP_CRON_DIR/backup.crontab.`date '+%Y-%m-%d-%H%M%S'`

prepare() {
    # Create backup cron dir if necessary 
    if [ ! -d $BACKUP_CRON_DIR ]
    then
        mkdir $BACKUP_CRON_DIR
    fi
}

#favor user crontab file
getcron() {
    if [ -f "$USER_CRON_FILE" ]
    then
        echo $USER_CRON_FILE
    elif [ -f "$HOST_CRON_FILE" ]
    then
        echo $HOST_CRON_FILE
    elif [ -f "$BASE_CRON_FILE" ]
    then
        echo $BASE_CRON_FILE
    fi
}

cd ${CRON_DIR}

NEW_CRON=$(getcron)

if [ -n "$NEW_CRON" ]
then
    prepare
    # Save off the old crontab in case it is needed for rollback
    crontab -l > $BACKUP_CRON
    has_cron=$?

    diffs=$(diff $BACKUP_CRON $NEW_CRON)

    if [ $? -ne 0 ]
    then
	#don't send an email if installing a cron for the first time. 
        if [ $has_cron -eq 0 ]
        then
            echo "ERROR: modified local cron overwritten by release"
            echo "$diffs" | mutt -s "`hostname`: modified local cron overwritten by release" devops@peak6.com
        fi
    fi
    echo "Installing cron from ${PWD}/${CRON_DIR}/${NEW_CRON}"
    crontab ${NEW_CRON}
elif [ "$#" -gt 0 ]
then
    echo "There is no crontab file for $1"
else
    echo "There is no crontab file for `hostname`"
fi
