#!/usr/bin/env python

# Start submgr to the latest release
import sys, getopt
import subprocess
import os
import datetime


def main(argv):
    
    env = ''
    system = ''

    try:
        opts, args = getopt.getopt(argv, 'e:s:h', ['env=', 'system='])
    except getopt.GetoptError as e:
        log("Usage error: " + str(e) + " Use './startit -h' for more info")
        printUsageAndExit()

    for opt, arg in opts:
        if opt == '-h':
            printUsageAndExit()
        elif opt == '-e':
            env = parseArg(arg)
        elif opt == '-s':
            system = parseArg(arg)
    
    if not env:
        log("'env' must be specified! Exiting...")
        sys.exit(1)
    if not system:
        log("'system' must be specified! Exiting...")
        sys.exit(1)

    log("Starting '" + system + "' in '" + env + "'...")
    command = getCommand(system)
    sp = subprocess.Popen([command], stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    stdout, stderr = sp.communicate()
    
    if sp.returncode != 0:
        log("Failed to start '" + system + "', command '" + command + "' returned nonzero exit code: " + str(sp.returncode) + "\n\tstdout: " + stdout + "\n\tstderr: " + stderr)
        sys.exit(1)
    if stdout:
        log("startSubMgr: " + stdout)

def getCommand(system):
    return os.path.expanduser('~/' + system + '/latest/scripts/startSubMgr')  

def printUsageAndExit():
    print './startit -e <env> -s <system>'
    print 'Args:'
    print '\tenv: environment the system should run in'
    print '\tsystem: name of the system to be started'
    print 'Flags:'
    print '\th: print this help and exit'
    sys.exit(1)

def parseArg(arg):
    if arg.startswith('='):
        return arg[1:]
    return arg

def log(msg):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S,%f')
    print timestamp + ' startit: ' + msg
    sys.stdout.flush()

main(sys.argv[1:])
